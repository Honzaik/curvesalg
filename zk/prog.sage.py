

# This file was *autogenerated* from the file prog.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2000 = Integer(2000); _sage_const_149 = Integer(149); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_6 = Integer(6); _sage_const_12 = Integer(12); _sage_const_5 = Integer(5); _sage_const_20 = Integer(20); _sage_const_8 = Integer(8); _sage_const_16 = Integer(16)
from sage.all import *
import sys

sys.setrecursionlimit(_sage_const_2000 )


selectedPrime = _sage_const_149 

a = _sage_const_1 
b = _sage_const_1 

R = PolynomialRing(GF(selectedPrime),_sage_const_2 ,order='invlex', names=('x', 'y',)); (x, y,) = R._first_ngens(2)
Q = QuotientRing(R,R.ideal(y**_sage_const_2  - x**_sage_const_3  -a*x -b), names=('x', 'y',)); (x, y,) = Q._first_ngens(2)


def expMod(poly, exp, modu):
    S = QuotientRing(Q, Q.ideal(modu), names=('s', 't',)); (s, t,) = S._first_ngens(2)#exp
    return Q(S(poly)**exp)

fPolyCache = {}
RPolyCache = {}
SPolyCache = {}
CPolyCache = {}
DPolyCache = {}

def getFPoly(m):
    toReturn = None
    if m in fPolyCache:
        return fPolyCache[m]

    if m == _sage_const_0 :
        toReturn = _sage_const_0 
    elif m == _sage_const_1  or m == _sage_const_2 :
        toReturn = _sage_const_1 
    elif m == _sage_const_3 :
        toReturn = _sage_const_3 *x**_sage_const_4 +_sage_const_6 *a*x**_sage_const_2 +_sage_const_12 *b*x-a**_sage_const_2 
    elif m == _sage_const_4 :
        toReturn = _sage_const_2 *(x**_sage_const_6  + _sage_const_5 *a*x**_sage_const_4  + _sage_const_20 *b*x**_sage_const_3  - _sage_const_5 *a*a*x**_sage_const_2  - _sage_const_4 *a*b*x - _sage_const_8 *b**_sage_const_2  - a**_sage_const_3 )
    else:
        if m % _sage_const_2  == _sage_const_0 :
            mHalf = m // _sage_const_2 
            toReturn = getFPoly(mHalf) * (getFPoly(mHalf + _sage_const_2 ) * getFPoly(mHalf - _sage_const_1 )**_sage_const_2  - getFPoly(mHalf - _sage_const_2 ) * getFPoly(mHalf + _sage_const_1 )**_sage_const_2 )
        else:
            mHalf = (m-_sage_const_1 )//_sage_const_2 
            if mHalf % _sage_const_2  == _sage_const_0 :
                toReturn = (_sage_const_16 *(x**_sage_const_3 +a*x+b)**_sage_const_2 )*getFPoly(mHalf+_sage_const_2 )*getFPoly(mHalf)**_sage_const_3  - getFPoly(mHalf-_sage_const_1 )*getFPoly(mHalf+_sage_const_1 )**_sage_const_3 
            else:
                toReturn = getFPoly(mHalf+_sage_const_2 )*getFPoly(mHalf)**_sage_const_3  -(_sage_const_16 *(x**_sage_const_3 +a*x+b)**_sage_const_2 )*getFPoly(mHalf-_sage_const_1 )*getFPoly(mHalf+_sage_const_1 )**_sage_const_3 
    fPolyCache[m] = toReturn
    return fPolyCache[m]

def getSBarPoly(m):
    ql = selectedPrime % m
    if ql == _sage_const_1 :
        return x**(selectedPrime**_sage_const_2 )-x
    if ql % _sage_const_2  == _sage_const_0 :
        return _sage_const_4 *(x**(selectedPrime**_sage_const_2 )-x)*(x**_sage_const_3 +a*x+b)*getFPoly(ql)**_sage_const_2 +getFPoly(ql-_sage_const_1 )*getFPoly(ql+_sage_const_1 )
    else:
        return (x**(selectedPrime**_sage_const_2 )-x)*getFPoly(ql)**_sage_const_2 +(_sage_const_4 *(x**_sage_const_3 +a*x+b))*getFPoly(ql-_sage_const_1 )*getFPoly(ql+_sage_const_1 )
    

def getRPoly(m):
    if m in RPolyCache:
        return RPolyCache[m]

    if m == _sage_const_1 :
        toReturn = _sage_const_1 
    elif m % _sage_const_2  == _sage_const_0 :
        toReturn = getFPoly(m+_sage_const_2 )*getFPoly(m-_sage_const_1 )**_sage_const_2  - getFPoly(m-_sage_const_2 )*getFPoly(m+_sage_const_1 )**_sage_const_2 
    else:
        toReturn = getFPoly(m+_sage_const_2 )*getFPoly(m-_sage_const_1 )**_sage_const_2  - getFPoly(m-_sage_const_2 )*getFPoly(m+_sage_const_1 )**_sage_const_2 

    RPolyCache[m] = toReturn
    return RPolyCache[m]

def getSPoly(m):
    if m in SPolyCache:
        return SPolyCache[m]
    if m == _sage_const_1 :
        toReturn = _sage_const_1 
    elif m % _sage_const_2  == _sage_const_0 :
        toReturn = _sage_const_16 *(x**_sage_const_3  + a*x + b)**_sage_const_2  * getFPoly(m)**_sage_const_3 
    else:
        toReturn = getFPoly(m)**_sage_const_3 

    SPolyCache[m] = toReturn
    return SPolyCache[m]

def getCPoly(m):
    if m in CPolyCache:
        return CPolyCache[m]

    if m == _sage_const_1 :
        toReturn = _sage_const_0 
    elif m % _sage_const_2  == _sage_const_0 :
        toReturn = getFPoly(m-_sage_const_1 )*getFPoly(m-_sage_const_1 )
    else:
        toReturn = _sage_const_4 *(x**_sage_const_3  + a*x + b)*getFPoly(m-_sage_const_1 )*getFPoly(m-_sage_const_1 )

    CPolyCache[m] = toReturn
    return CPolyCache[m]

def getDPoly(m):
    if m in DPolyCache:
        return DPolyCache[m]

    if m == _sage_const_1 :
        toReturn = _sage_const_1 
    elif m % _sage_const_2  == _sage_const_0 :
        toReturn = _sage_const_4 *(x**_sage_const_3  + a*x + b)*getFPoly(m)**_sage_const_2 
    else:
        toReturn = getFPoly(m)**_sage_const_2 

    DPolyCache[m] = toReturn
    return DPolyCache[m]

def tyzero(l, m):
    fl = getFPoly(l)
    exponent = (selectedPrime**_sage_const_2 -_sage_const_1 ) / _sage_const_2 
    polyToTest = getSPoly(m) * expMod((x**_sage_const_3 +a*x+b), Integer(exponent), fl) + getRPoly(m)
    res = R(polyToTest) % R(fl)
    return res == _sage_const_0 
    
def eigen(l, gamma, gl):
    if gl == _sage_const_1 :
        return False

    exponent = (selectedPrime**_sage_const_2 -_sage_const_1 ) / _sage_const_2 
    polyToTest = getSPoly(m) * expMod((x**_sage_const_3 +a*x+b), Integer(exponent), fl) - getRPoly(m)
    res = R(polyToTest) % R(gl)
    print('eigen res:', res)
    return res == _sage_const_0 
    
def equalx(l, gl):
    K = GF(l) 
    ql = selectedPrime % l
    print(K(ql).is_square())
    if not K(ql).is_square() or tyzero(l, ql):
        return _sage_const_0 

    tau = (R(_sage_const_4 *ql).sqrt()) % l
    gamma = (R(_sage_const_2 *ql) * R(tau)**(-_sage_const_1 )) % l
    if eigen(l, gamma, gl):
        return tau
    return -tau
    
def nonequalx(l, tau):

    m = selectedPrime % l

    fl = getFPoly(l)
    cm = R(getCPoly(m)) % R(fl)
    dm = R(getDPoly(m)) % R(fl)
    rm = R(getRPoly(m)) % R(fl)
    sm = R(getSPoly(m)) % R(fl)

    ctau = R(getCPoly(tau)) % R(fl)
    dtau = R(getDPoly(tau)) % R(fl)
    rtau = R(getRPoly(tau)) % R(fl)
    stau = R(getSPoly(tau)) % R(fl)

    F = Q.fraction_field()

    exponent = (selectedPrime**_sage_const_2  - _sage_const_1 )/_sage_const_2 

    lam = y * (F(dm)/F(sm)) * (F(expMod(x**_sage_const_3  + a*x + b, Integer(exponent), fl) * sm - rm))/(F(dm * (expMod(x,Integer(selectedPrime**_sage_const_2 ), fl) - x) + cm))

    firstX = F(lam**_sage_const_2  - expMod(x,Integer(selectedPrime**_sage_const_2 ), fl) - x) + (F(cm)/F(dm))
    secondX = F(x**selectedPrime) - (F(ctau(x=x**selectedPrime))/F(dtau(x=x**selectedPrime)))


    hx = R((firstX - secondX).numerator()) % R(fl)
    if R(fl).gcd(R(hx)) == _sage_const_1 :
        return _sage_const_0 
    print(hx)
    return _sage_const_0 
    hy = _sage_const_0  % R(fl)
    
    
    if R(fl).gcd(R(hy)) == _sage_const_1 :
        return -_sage_const_1 
    return _sage_const_1 

def schoff():
    B = _sage_const_2 
    l = _sage_const_2 
    curvePoly = x**_sage_const_3 +a*x+b
    cycloPoly = x**selectedPrime - x
    if R(curvePoly).gcd(R(cycloPoly)) == _sage_const_1 :
        tau = _sage_const_1 
    else:
        tau = _sage_const_0 
    residues = [tau]
    moduli = [_sage_const_2 ]
    
    while B < _sage_const_4 *sqrt(selectedPrime):
        l = l.next_prime()
        B = B*l
        fl = getFPoly(l)
        sl = R(getSBarPoly(l))

        sl = sl % R(fl)
        gl = R(fl).gcd(sl)

        if gl == _sage_const_1 :
            print('equalx')
            tau = equalx(l, gl)
        else:
            print('not equal x')
            r = None
            tau = _sage_const_0 
            while r != _sage_const_0 :
                tau += _sage_const_1 
                r = nonequalx(l, tau)
            if r == -_sage_const_1 :
                tau = -tau
        residues.append(tau)
        moduli.append(l)

    trace = crt(residues, moduli)
    return selectedPrime+_sage_const_1 -trace

print(schoff())

print(tyzero(_sage_const_3 , _sage_const_2 ))

